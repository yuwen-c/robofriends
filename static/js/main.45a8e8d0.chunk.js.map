{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","component/ErrorBoundary.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","username","email","className","alt","src","CardList","robots","map","card","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","prop","style","overflowY","border","height","children","ErrorBoundary","props","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oOAkBeA,EAfF,SAAC,GAAgC,EAA/BC,GAAgC,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAElC,OAGC,yBAAKC,UAAY,uDAChB,yBAAKC,IAAI,QAAQC,IAAG,gCAA2BJ,EAA3B,eACpB,6BACC,gCAASD,GACT,2BAAIC,GACJ,2BAAIC,MCuBOI,EAhCE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAKnB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC,EAAD,CACDC,IAAKJ,EAAOG,GAAOX,GAElBA,GAAIQ,EAAOG,GAAOX,GAClBC,KAAMO,EAAOG,GAAOV,KACpBC,SAAUM,EAAOG,GAAOT,SACxBC,MAAOK,EAAOG,GAAOR,aCDZU,EAfG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKV,UAAU,OACd,2BACCA,UAAU,mCACVW,KAAK,SACLC,YAAY,eACZC,SAAUH,EACVb,KAAK,cCDMiB,G,MARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAKK,SADP,OCqBaC,E,kDAtBd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACZC,UAAU,GAHM,E,8DAOAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAIG,KAAKJ,MAAMC,SACP,8DAGAG,KAAKL,MAAMF,a,GAlBOS,aCyEbC,E,kDAhDd,aAAc,IAAD,8BACZ,gBAODC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAP1C,EAAKZ,MAAQ,CACZnB,OAAQ,GACR6B,YAAY,IAJD,E,gEAaO,IAAD,OAClBG,QAAQC,IAAI,qBAEZC,MAAM,6CACJC,MAAK,SAAAC,GAAc,OAAOA,EAASC,UACnCF,MAAK,SAAAG,GAAU,EAAKd,SAAS,CAACxB,OAAQsC,S,+BAEjC,MACuBf,KAAKJ,MAA5BnB,EADA,EACAA,OAAQ6B,EADR,EACQA,YACTU,EAAiBvC,EAAOwC,QAAO,SAACC,GACrC,OAAOA,EAAMhD,KAAKiD,cAAcC,SAASd,EAAYa,kBAItD,OAAsB,IAAlB1C,EAAO4C,OACH,wBAAIhD,UAAU,MAAd,eAIP,yBAAKA,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAciB,KAAKI,iBAG9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQuC,IADnB,W,GAvCaM,IAAMpB,W,MCfJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDoH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.45a8e8d0.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({id, name, username, email}) => {\n\t//const {id, name, username, email} = robot;\n\treturn (\n\t\t// display: inline-block, border-radius, padding all, margin-all, \n\t\t// grow (scale), border-widths, box-shaadow\n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robot' src={`https://robohash.org/+${username}+?150x150`}/>\n\t\t\t<div>\n\t\t\t\t<header>{name}</header>\n\t\t\t\t<p>{username}</p>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\nexport default Card;","import React from 'react';\nimport Card from './Card.js';\n\n// 把冗的[0], [1]取代掉，用array方法: map\nconst CardList = ( {robots} ) => {\n\t//const CardsArray = \n\tif(true){\n\t\t//throw new Error('ohhh noooooo!!!!')   // an error message for developer\n\t}\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\trobots.map((card, index) => {//每個robot 資料要進一張card\n\t\t\t\treturn (\n\t\t\t\t  <Card \n\t\t\t\t\tkey={robots[index].id}\n\t\t\t\t\t//key: Each child in an array should have a unique key prop, \n\t\t\t\t \tid={robots[index].id} \n\t\t\t\t \tname={robots[index].name} \n\t\t\t\t \tusername={robots[index].username} \n\t\t\t\t \temail={robots[index].email}\n\t\t\t\t \t/>\n\t\t\t\t);\n\t\t\t}) \n\t\t}\n\t\t</div>\n\t);\n}\n\n// /* 207. App2.\n// * 這邊不明白的點：\n// * 1. 傳入參數( {robots} )\n// * 2. 在map method裡面為何不用參數card而是用robots? 因為在{}裡面嗎？\n// * 3. return的 map結果 要用{ }包起來 因為是javascript\n// *\n// */\nexport default CardList;\n\n","import React from 'react';\n\n\n\nconst SearchBox = ({searchChange}) => {\n\treturn(\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--green bg-lightest blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robot' \n\t\t\t\tonChange={searchChange} /*listen to the changes and do function*/\n\t\t\t\tname='keyword'/>\n\t\t</div>\n\t\t);\n}\n\n\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (prop) =>{\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\n\t\t\t{prop.children};\n\t\t</div>\n\t\t);\n}\n\nexport default Scroll;","//import React from 'react';\nimport React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t};\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({hasError: true});\n\t\t// logErrorToMyService(error, info,'test');???\n\t}\n\n\trender(){\n\t\tif (this.state.hasError){\n\t\t\treturn <h1>Oh no, something bad happened!</h1>;\n\t\t}\n\t\telse{\n\t\t\treturn this.props.children;\n\t\t}\n\t}\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport CardList from '../component/CardList.js';\n//import {robots} from '../component/robots.js';\nimport SearchBox from '../component/SearchBox';\nimport './App.css';\nimport Scroll from '../component/Scroll.js';\nimport ErrorBoundary from '../component/ErrorBoundary.js';\n\n// to communicate the two components, searchBox and robots, we need 'state'\n// const state = {\n// \trobots:'robots', //robots array\n// \tsearchfield:'' // inputbox\n// }\n\n// const App = () => {\n// \treturn(\n// \t\t<React.Fragment>\n// \t\t\t<div className=\"tc\">\n// \t\t\t\t<h1>RobotFriends</h1>\n// \t\t\t\t<SearchBox/>\t\n// \t\t\t\t<CardList robots={robots}/>\n// \t\t\t</div>\n// \t\t</React.Fragment>\n// \t\t)\n// }\n\n// to use state syntax, a class is required.\nclass App extends React.Component {\n\tconstructor(){\n\t\tsuper()    // before this, super() is called.\n\t\tthis.state = {\n\t\t\trobots: [], // in real world, we get data from server instead of importing a file\n\t\t\tsearchfield:''\n\t\t}\n\t}\n\t// this function has a random name. App listens to the changes.\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value});\n\t\t\t// update searchfield everytime, otherwise it's \"\" forever. \n\t\t//console.log(filteredRobots); //listen to changes in searchbox\n\t}\n\tcomponentDidMount(){\n\t\tconsole.log(\"componentDidMount\");\n\t\t// fetch is a method of window object, it allows us to make requests to server.\n\t\tfetch('http://jsonplaceholder.typicode.com/users') // go to this url and get data\n\t\t\t.then(response => {\treturn response.json();})\n\t\t\t.then(users => {this.setState({robots: users})})  //update state\n\t}\n\trender(){      // also, a render in class is needed.\n\t\tconst {robots, searchfield} = this.state; // for short writing, not repeating this.state\n\t\tconst filteredRobots = robots.filter((robot) => {\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\n\t\t}) \n\t\t// if data is so huge, we can use a if statement, then the original empty [] shows loading.\n\t\t// after this.setState, robots will show.\n\t\tif (robots.length === 0){\n\t\t\treturn(<h1 className='tc'>Loading....</h1>)\n\t\t}\n\t\telse{\n\t\treturn(\t\n\t\t\t<div className=\"tc\">\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\t\n\t\t\t\t{/*  anytime when the searchbox changes, it triggers the searchChange function.\n\t\t\t\t */}\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CardList robots={filteredRobots}/> { /*CardLists receives robots from state*/}\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t) \n\t\t} \n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\n//import Card from './Card.js';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\n// these are only atoms, but it's a little bit messy. \n// Instead, we can use a higher class (parents) of atoms.\n// parents: CardList, child: Card.\n//ReactDOM.render(<CardList robots={robots}/>, document.getElementById('root'));\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n/// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}